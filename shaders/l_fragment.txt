#version 330 core
#extension GL_ARB_separate_shader_objects : enable

struct GeometryData {
    sampler2D position;
    sampler2D gAlbedoSpecular;
    sampler2D normalAo;
};
uniform GeometryData fragment;

struct Light {
    vec3 position;
    vec3 color;
    float strength;
};
uniform Light lights[24];

vec3 CalculatePointLight(Light light, vec3 cameraPosition, vec3 fragmentPosition, vec3 normal, GeometryData fragment, vec2 texCoord) {
    vec3 result = vec3(0.0);
	vec3 lightDir = normalize(light.position - fragmentPosition);
    vec3 viewDir = normalize(cameraPosition - fragmentPosition);
    vec3 halfDir = normalize(lightDir + viewDir);
    vec4 albedoSpecular = texture(fragment.gAlbedoSpecular, texCoord);

	result += light.color * max(0.0,dot(normal,lightDir)) * albedoSpecular.rgb;
    result += light.color * light.strength * pow(max(dot(normal, halfDir), 0.0),32) * albedoSpecular.a;
    
    return result;
}

layout (location=0) in vec2 fragmentTexCoord;

uniform vec3 ambient;
uniform vec3 viewPos;
uniform float lightCount;
layout (location=0) out vec4 color;

void main()
{
    vec3 lightLevel = vec3(0.0);
    vec4 normalAo = texture(fragment.normalAo, fragmentTexCoord);
    vec3 fragmentPos = texture(fragment.position, fragmentTexCoord).xyz;
    vec3 fragmentNormal = (2.0 * normalAo.rgb - vec3(1.0));
    float ao = normalAo.a;
    
    lightLevel += ambient * texture(fragment.gAlbedoSpecular, fragmentTexCoord).rgb;
    for (int i = 0; i < lightCount; i++) {
        float distance = length(lights[i].position - fragmentPos);
        lightLevel += CalculatePointLight(lights[i], viewPos, fragmentPos, fragmentNormal, fragment, fragmentTexCoord) / distance;
    }

    color = vec4(lightLevel, 1.0) * ao;
    // position
    //color = vec4(texture(fragment.position, fragmentTexCoord).rgb, 1.0);
    // albedo / diffuse
    //color = vec4(texture(fragment.gAlbedoSpecular, fragmentTexCoord).rgb, 1.0);
    // specular
    //color = vec4(vec3(texture(fragment.gAlbedoSpecular, fragmentTexCoord).a), 1.0);
    // ambient occlusion
    //color = vec4(vec3(texture(fragment.normalAo, fragmentTexCoord).a), 1.0);
    // normal
    //color = vec4(texture(fragment.normalAo, fragmentTexCoord).rgb, 1.0);
}
